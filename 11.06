using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Sockets;

class ImageServer
{
    static void Main()
    {
        TcpListener listener = new TcpListener(IPAddress.Any, 9000);
        listener.Start();
        Console.WriteLine("Сервер запущен...");

        while (true)
        {
            using (TcpClient client = listener.AcceptTcpClient())
            using (NetworkStream stream = client.GetStream())
            {
                // Получение размера изображения (8 байт)
                byte[] sizeBytes = new byte[8];
                stream.Read(sizeBytes, 0, 8);
                long fileSize = BitConverter.ToInt64(sizeBytes, 0);

                // Получение изображения
                byte[] imageBuffer = new byte[fileSize];
                int totalRead = 0;
                while (totalRead < fileSize)
                {
                    int read = stream.Read(imageBuffer, totalRead, (int)(fileSize - totalRead));
                    if (read == 0) break;
                    totalRead += read;
                }

                // Сжатие изображения
                byte[] resizedBytes;
                using (var inputStream = new MemoryStream(imageBuffer))
                using (var originalImage = new Bitmap(inputStream))
                {
                    int newWidth = originalImage.Width / 2;
                    int newHeight = originalImage.Height / 2;
                    using (var resizedImage = new Bitmap(newWidth, newHeight))
                    using (var graphics = Graphics.FromImage(resizedImage))
                    {
                        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        graphics.DrawImage(originalImage, 0, 0, newWidth, newHeight);
                        using (var outputStream = new MemoryStream())
                        {
                            resizedImage.Save(outputStream, ImageFormat.Jpeg);
                            resizedBytes = outputStream.ToArray();
                        }
                    }
                }

                // Отправка размера сжатого файла (8 байт)
                byte[] responseSizeBytes = BitConverter.GetBytes((long)resizedBytes.Length);
                stream.Write(responseSizeBytes, 0, responseSizeBytes.Length);

                // Отправка сжатого изображения
                stream.Write(resizedBytes, 0, resizedBytes.Length);

                Console.WriteLine("Обработан и отправлен уменьшенный файл размером {0} байт", resizedBytes.Length);
            }
        }
    }
}
