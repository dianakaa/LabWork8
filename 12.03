<Window x:Class="ProcessManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Process Manager" Height="450" Width="800">
    <Grid>
        <Menu VerticalAlignment="Top">
            <MenuItem Header="Файл">
                <MenuItem Header="Запустить новую задачу" Click="NewTask_Click"/>
                <Separator/>
                <MenuItem Header="Выход" Click="Exit_Click"/>
            </MenuItem>
        </Menu>

        <ToolBar DockPanel.Dock="Top">
            <Button Content="Обновить" Click="Refresh_Click"/>
            <Button Content="Снять задачу" Click="KillTask_Click"/>
            <Button Content="Завершить дерево процессов" Click="KillProcessTree_Click"/>
        </ToolBar>

        <StatusBar>
            <TextBlock x:Name="ProcessCountTextBlock" Text="Количество процессов: 0"/>
        </StatusBar>

        <TabControl>
            <TabItem Header="Процессы">
                <ListView x:Name="ProcessesListView">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Имя" DisplayMemberBinding="{Binding ProcessName}"/>
                            <GridViewColumn Header="PID" DisplayMemberBinding="{Binding Id}"/>
                            <GridViewColumn Header="Память" DisplayMemberBinding="{Binding WorkingSet64}"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </TabItem>
            <TabItem Header="Приложения">
                <!-- Здесь можно добавить элементы для отображения приложений -->
                <TextBlock Text="Здесь будут приложения."/>
            </TabItem>
        </TabControl>
    </Grid>
</Window>



using System;
using System.Diagnostics;
using System.Windows;

namespace ProcessManager
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadProcesses();
        }

        private void LoadProcesses()
        {
            var processes = Process.GetProcesses();
            ProcessesListView.ItemsSource = processes;
            ProcessCountTextBlock.Text = $"Количество процессов: {processes.Length}";
        }

        private void Refresh_Click(object sender, RoutedEventArgs e)
        {
            LoadProcesses();
        }

        private void KillTask_Click(object sender, RoutedEventArgs e)
        {
            if (ProcessesListView.SelectedItem is Process selectedProcess)
            {
                selectedProcess.Kill();
                LoadProcesses();
            }
        }

        private void KillProcessTree_Click(object sender, RoutedEventArgs e)
        {
            // Логика для завершения дерева процессов
        }

        private void NewTask_Click(object sender, RoutedEventArgs e)
        {
            // Логика для запуска новой задачи
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}
