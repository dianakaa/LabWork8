public class UserService
{
    private readonly AppDbContext _context;

    public UserService(AppDbContext context)
    {
        _context = context;
    }

    public void CreateUser(User user)
    {
        _context.Users.Add(user);
        _context.SaveChanges();
    }

    public List<User> GetAllUsers()
    {
        return _context.Users.ToList();
    }

    public void DeleteUser(int id)
    {
        var user = _context.Users.Find(id);
        if (user != null)
        {
            _context.Users.Remove(user);
            _context.SaveChanges();
        }
    }

    public void UpdateUser(User user)
    {
        _context.Users.Update(user);
        _context.SaveChanges();
    }
}





using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace YourApp
{
    public class Program
    {
        public static AppBuilder BuildAvaloniaApp()
            => new AppBuilder().Setup<App>();

        public static void Main(string[] args) => BuildAvaloniaApp()
            .Start<App>(args);

        public static void OnFrameworkInitializationCompleted()
        {
            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                using (var context = new AppDbContext())
                {
                    context.Database.EnsureCreated();
                }

                desktop.MainWindow = new MainWindow
                {
                    DataContext = new MainWindowViewModel(),
                };
            }
        }
    }
}






using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace YourApp
{
    public class Program
    {
        public static AppBuilder BuildAvaloniaApp()
            => new AppBuilder().Setup<App>();

        public static void Main(string[] args)
        {
            var builder = new HostBuilder()
                .ConfigureServices(services =>
                {
                    services.AddDbContext<AppDbContext>(options =>
                        options.UseSqlite("Data Source=app.db"));
                    services.AddTransient<UserService>();
                })
                .Build();

            using (var scope = builder.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetService<AppDbContext>();
                context.Database.EnsureCreated();
            }

            BuildAvaloniaApp()
                .Start<App>(args);
        }
    }
}




using Avalonia.Controls;
using Avalonia.Interactivity;

namespace YourApp
{
    public partial class MainWindow : Window
    {
        private readonly UserService _userService;

        public MainWindow(UserService userService)
        {
            InitializeComponent();
            _userService = userService;
            UpdateUsersList();
        }

        private void CreateButton_Click(object sender, RoutedEventArgs e)
        {
            var user = new User
            {
                Login = LoginTextBox.Text,
                Password = PasswordTextBox.Text
            };
            _userService.CreateUser(user);
            UpdateUsersList();
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedUser = (User)UsersListBox.SelectedItem;
            if (selectedUser != null)
            {
                selectedUser.Login = LoginTextBox.Text;
                selectedUser.Password = PasswordTextBox.Text;
                _userService.UpdateUser(selectedUser);
                UpdateUsersList();
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedUser = (User)UsersListBox.SelectedItem;
            if (selectedUser != null)
            {
                _userService.DeleteUser(selectedUser.Id);
                UpdateUsersList();
            }
        }

        private void UpdateUsersList()
        {
            var users = _userService.GetAllUsers();
            UsersListBox.ItemsSource = users;
        }
    }
}





using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;

namespace YourApp
{
    public class App : Application
    {
        public override void Initialize()
        {
            AvaloniaXamlLoader.Load(this);
        }

        public override void OnFrameworkInitializationCompleted()
        {
            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                var serviceProvider = (IServiceProvider)desktop;
                var userService = serviceProvider.GetService<UserService>();
                desktop.MainWindow = new MainWindow(userService);
            }

            base.OnFrameworkInitializationCompleted();
        }
    }
}
