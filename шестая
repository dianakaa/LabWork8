using Avalonia.Controls;
using Avalonia.Interactivity;

namespace AvaloniaApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainWindowViewModel(new UserService(new AppDbContext()));
        }

        private async void CreateButton_Click(object sender, RoutedEventArgs e)
        {
            await ((MainWindowViewModel)DataContext).AddUser();
        }

        private async void EditButton_Click(object sender, RoutedEventArgs e)
        {
            var button = (Button)sender;
            var user = (User)button.DataContext;
            ((MainWindowViewModel)DataContext).Login = user.Login;
            ((MainWindowViewModel)DataContext).Password = user.Password;
        }

        private async void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            var button = (Button)sender;
            var user = (User)button.DataContext;
            await ((MainWindowViewModel)DataContext).DeleteUser(user);
        }

        private async void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            var viewModel = (MainWindowViewModel)DataContext;
            var user = viewModel.Users.FirstOrDefault(u => u.Login == viewModel.Login && u.Password == viewModel.Password);
            if (user != null)
            {
                user.Login = viewModel.Login;
                user.Password = viewModel.Password;
                await viewModel.UpdateUser(user);
            }
            else
            {
                // Если пользователь не найден, создайте нового
                var newUser = new User { Login = viewModel.Login, Password = viewModel.Password };
                await viewModel.AddUser();
            }
        }
    }
}











public class UserService
{
    private readonly AppDbContext _context;

    public UserService(AppDbContext context)
    {
        _context = context;
    }

    public void CreateUser(User user)
    {
        _context.Users.Add(user);
        _context.SaveChanges();
    }

    public List<User> GetAllUsers()
    {
        return _context.Users.ToList();
    }

    public void DeleteUser(int id)
    {
        var user = _context.Users.Find(id);
        if (user != null)
        {
            _context.Users.Remove(user);
            _context.SaveChanges();
        }
    }

    public void UpdateUser(User user)
    {
        _context.Users.Update(user);
        _context.SaveChanges();
    }
}





using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace YourApp
{
    public class Program
    {
        public static AppBuilder BuildAvaloniaApp()
            => new AppBuilder().Setup<App>();

        public static void Main(string[] args) => BuildAvaloniaApp()
            .Start<App>(args);

        public static void OnFrameworkInitializationCompleted()
        {
            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                using (var context = new AppDbContext())
                {
                    context.Database.EnsureCreated();
                }

                desktop.MainWindow = new MainWindow
                {
                    DataContext = new MainWindowViewModel(),
                };
            }
        }
    }
}






using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace YourApp
{
    public class Program
    {
        public static AppBuilder BuildAvaloniaApp()
            => new AppBuilder().Setup<App>();

        public static void Main(string[] args)
        {
            var builder = new HostBuilder()
                .ConfigureServices(services =>
                {
                    services.AddDbContext<AppDbContext>(options =>
                        options.UseSqlite("Data Source=app.db"));
                    services.AddTransient<UserService>();
                })
                .Build();

            using (var scope = builder.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetService<AppDbContext>();
                context.Database.EnsureCreated();
            }

            BuildAvaloniaApp()
                .Start<App>(args);
        }
    }
}




using Avalonia.Controls;
using Avalonia.Interactivity;

namespace YourApp
{
    public partial class MainWindow : Window
    {
        private readonly UserService _userService;

        public MainWindow(UserService userService)
        {
            InitializeComponent();
            _userService = userService;
            UpdateUsersList();
        }

        private void CreateButton_Click(object sender, RoutedEventArgs e)
        {
            var user = new User
            {
                Login = LoginTextBox.Text,
                Password = PasswordTextBox.Text
            };
            _userService.CreateUser(user);
            UpdateUsersList();
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedUser = (User)UsersListBox.SelectedItem;
            if (selectedUser != null)
            {
                selectedUser.Login = LoginTextBox.Text;
                selectedUser.Password = PasswordTextBox.Text;
                _userService.UpdateUser(selectedUser);
                UpdateUsersList();
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedUser = (User)UsersListBox.SelectedItem;
            if (selectedUser != null)
            {
                _userService.DeleteUser(selectedUser.Id);
                UpdateUsersList();
            }
        }

        private void UpdateUsersList()
        {
            var users = _userService.GetAllUsers();
            UsersListBox.ItemsSource = users;
        }
    }
}





using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;

namespace YourApp
{
    public class App : Application
    {
        public override void Initialize()
        {
            AvaloniaXamlLoader.Load(this);
        }

        public override void OnFrameworkInitializationCompleted()
        {
            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                var serviceProvider = (IServiceProvider)desktop;
                var userService = serviceProvider.GetService<UserService>();
                desktop.MainWindow = new MainWindow(userService);
            }

            base.OnFrameworkInitializationCompleted();
        }
    }
}





<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="AvaloniaApp.MainWindow"
        Title="AvaloniaApp"
        Width="800" Height="450">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBox Grid.Row="0" Grid.Column="0" x:Name="LoginInput" Margin="5" PlaceholderText="Логин"/>
        <TextBox Grid.Row="1" Grid.Column="0" x:Name="PasswordInput" Margin="5" PlaceholderText="Пароль"/>
        <Button Grid.Row="2" Grid.Column="0" x:Name="CreateButton" Margin="5" Content="Создать" Click="CreateButton_Click"/>
        <ListBox Grid.Row="3" Grid.Column="0" x:Name="UsersList" Margin="5" />
    </Grid>
</Window>





using ReactiveUI;
using System.Collections.ObjectModel;

public class MainWindowViewModel : ViewModelBase
{
    private readonly UserService _userService;

    public MainWindowViewModel(UserService userService)
    {
        _userService = userService;
        Users = new ObservableCollection<User>();
        LoadUsers();
    }

    public ObservableCollection<User> Users { get; }

    private string _login;
    public string Login
    {
        get => _login;
        set => this.RaiseAndSetIfChanged(ref _login, value);
    }

    private string _password;
    public string Password
    {
        get => _password;
        set => this.RaiseAndSetIfChanged(ref _password, value);
    }

    public async Task AddUser()
    {
        var user = new User { Login = Login, Password = Password };
        await _userService.AddUser(user);
        await LoadUsers();
        Login = string.Empty;
        Password = string.Empty;
    }

    public async Task DeleteUser(User user)
    {
        await _userService.DeleteUser(user.Id);
        await LoadUsers();
    }

    public async Task UpdateUser(User user)
    {
        await _userService.UpdateUser(user);
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var users = await _userService.GetAllUsers();
        Users.Clear();
        foreach (var user in users)
        {
            Users.Add(user);
        }
    }
}



public MainWindow()
{
    InitializeComponent();
    DataContext = new MainWindowViewModel(new UserService(new AppDbContext()));
}





private async void CreateButton_Click(object sender, RoutedEventArgs e)
{
    await ((MainWindowViewModel)DataContext).AddUser();
}

private async void UsersList_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    if (e.AddedItems.Count > 0)
    {
        var user = (User)e.AddedItems[0];
        // Добавьте логику для редактирования и удаления
    }
}







<ListBox.ItemTemplate>
    <DataTemplate>
        <StackPanel Orientation="Horizontal">
            <TextBlock Text="{Binding Login}" Margin="5"/>
            <Button Content="Редактировать" Click="EditButton_Click"/>
            <Button Content="Удалить" Click="DeleteButton_Click"/>
        </StackPanel>
    </DataTemplate>
</ListBox.ItemTemplate>





private async void EditButton_Click(object sender, RoutedEventArgs e)
{
    var button = (Button)sender;
    var user = (User)button.DataContext;
    // Добавьте логику для редактирования
}

private async void DeleteButton_Click(object sender, RoutedEventArgs e)
{
    var button = (Button)sender;
    var user = (User)button.DataContext;
    await ((MainWindowViewModel)DataContext).DeleteUser(user);
}








// В MainWindow.xaml добавьте кнопку "Сохранить"
<Button Content="Сохранить" Click="SaveButton_Click"/>

// В MainWindow.xaml.cs добавьте обработчик для кнопки "Сохранить"
private async void SaveButton_Click(object sender, RoutedEventArgs e)
{
    var user = (User)UsersList.SelectedItem;
    if (user != null)
    {
        user.Login = LoginInput.Text;
        user.Password = PasswordInput.Text;
        await ((MainWindowViewModel)DataContext).UpdateUser(user);
    }
}

// В EditButton_Click обновите логику для редактирования
private void EditButton_Click(object sender, RoutedEventArgs e)
{
    var button = (Button)sender;
    var user = (User)button.DataContext;
    LoginInput.Text = user.Login;
    PasswordInput.Text = user.Password;
}



