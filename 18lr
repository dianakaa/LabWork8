<Window x:Class="DiskInfoApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:DiskInfoApp"
        Title="Disk Information" Height="450" Width="800">
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="7*"/>
            <RowDefinition Height="3*"/>
        </Grid.RowDefinitions>

        <!-- Верхняя часть: информация о дисках -->
        <DataGrid Grid.Row="0" 
                  AutoGenerateColumns="False"
                  ItemsSource="{Binding Disks}"
                  IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Имя" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Тип" Binding="{Binding DriveType}"/>
                <DataGridTextColumn Header="Общий размер" Binding="{Binding TotalSize, Converter={local:BytesToHumanReadableConverter}}"/>
                <DataGridTextColumn Header="Использовано %" Binding="{Binding UsedPercent}"/>
                <DataGridTextColumn Header="Свободно" Binding="{Binding FreeSpace, Converter={local:BytesToHumanReadableConverter}}"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Нижняя часть: информация о папке -->
        <StackPanel Grid.Row="1" Margin="10">
            <TextBox Text="{Binding CurrentFolder}" Margin="0 0 0 10"/>
            <!-- Дополнительные элементы для отображения информации о папке -->
        </StackPanel>
    </Grid>
</Window>





public class BytesToHumanReadableConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        long bytes = (long)value;
        string[] suffixes = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        
        int suffixIndex = 0;
        double size = bytes;
        
        while (size >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }
        
        return $"{size:0.##} {suffixes[suffixIndex]}";
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}



public class MainViewModel : INotifyPropertyChanged
{
    public ObservableCollection<DiskInfo> Disks { get; } = new();
    public string CurrentFolder { get; set; }

    public MainViewModel()
    {
        LoadDisks();
    }

    private void LoadDisks()
    {
        foreach (var drive in DriveInfo.GetDrives().Where(d => d.IsReady))
        {
            Disks.Add(new DiskInfo
            {
                Name = drive.Name,
                DriveType = drive.DriveType.ToString(),
                TotalSize = drive.TotalSize,
                FreeSpace = drive.TotalFreeSpace,
                UsedPercent = 100 - (drive.TotalFreeSpace * 100 / drive.TotalSize)
            });
        }
    }
    
    public event PropertyChangedEventHandler? PropertyChanged;
}

public class DiskInfo
{
    public string Name { get; set; }
    public string DriveType { get; set; }
    public long TotalSize { get; set; }
    public long FreeSpace { get; set; }
    public double UsedPercent { get; set; }
}





